## \file /SANDBOX/davidka/google_search_links_graber.py
# -*- coding: utf-8 -*-
#! .pyenv/bin/python3

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ Google.
===========================================================
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google Custom Search JSON API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ
–ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ï—Å–ª–∏ API-–∫–ª—é—á –∏–ª–∏ CSE ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
–≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.

–ú–µ—Ç–æ–¥—ã:
1.  **Google Custom Search JSON API (–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π):**
    - –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
        - `GOOGLE_API_KEY`: –í–∞—à API –∫–ª—é—á –∏–∑ Google Cloud Console.
        - `GOOGLE_CSE_ID`: ID –≤–∞—à–µ–π Custom Search Engine.
    - –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google.
    - –ò–º–µ–µ—Ç –∫–≤–æ—Ç—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –ø–ª–∞—Ç–Ω—ã–µ).
2.  **–í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ (–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):**
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
    - –ú–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π HTML –∏ –º–µ—Ä –∑–∞—â–∏—Ç—ã Google.
    - –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    - requests (pip install requests)
    - beautifulsoup4 (pip install beautifulsoup4) - –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    - –ù–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π logger –∏ printer –≤ –ø—Ä–æ–µ–∫—Ç–µ hypotez.


–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
Create google custom search api üëâ https://developers.google.com/custom-search/v1/introduction?hl=ru
Google CSE ID üëâ https://programmablesearchengine.google.com/

```rst
.. module:: SANDBOX.davidka.google_search_links_graber
```
"""

import sys
import time
import random
import os 
from pathlib import Path
from typing import Optional, List, Dict, Any
from urllib.parse import urlparse, parse_qs, urlencode

import requests
from bs4 import BeautifulSoup # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
from bs4.element import Tag # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞


import header
from header import __root__
from src import gs
from src.logger.logger import logger
from src.utils.printer import pprint as print


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API ---
    # –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    API_KEY:str = gs.credentials.google_custom_search.onela.api_key or os.getenv('GOOGLE_API_KEY')
    CSE_ID: str = gs.credentials.google_custom_search.onela.cse_id or os.getenv('GOOGLE_CSE_ID')
    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Google Custom Search API
    API_ENDPOINT: str = 'https://www.googleapis.com/customsearch/v1'

    # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –°–∫—Ä–∞–ø–∏–Ω–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ) ---
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    SCRAPER_HEADERS: Dict[str, str] = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    # –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Google –º–æ–∂–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
    # –î–ª—è API 'num' –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ 10. –î–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º 10.
    NUM_RESULTS: int = 10


# --- –§—É–Ω–∫—Ü–∏–∏ API ---
def fetch_search_results_api(query: str, api_key: str, cse_id: str, num_results: int = 10) -> Optional[List[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Custom Search JSON API.

    Args:
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        api_key (str): API –∫–ª—é—á Google Cloud.
        cse_id (str): ID Custom Search Engine.
        num_results (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å. 10 –∑–∞ —Ä–∞–∑). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10.

    Returns:
        Optional[List[str]]: –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    params: Dict[str, Any]
    response: Optional[requests.Response] = None
    results_json: Optional[Dict[str, Any]] = None
    items: Optional[List[Dict[str, Any]]] = None
    links: List[str] = []

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    params = {
        'key': api_key,
        'cx': cse_id,
        'q': query,
        'num': min(num_results, 10) # API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
        # 'start': 1 # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (1, 11, 21, ...)
    }
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ API: {Config.API_ENDPOINT} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: { {k: v for k, v in params.items() if k != 'key'} }") # –õ–æ–≥ –±–µ–∑ –∫–ª—é—á–∞

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞ –∫ API
        response = requests.get(Config.API_ENDPOINT, params=params, timeout=15)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        response.raise_for_status()
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
        results_json = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ API
        if 'error' in results_json:
            error_details = results_json.get('error', {})
            error_message = error_details.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
            error_code = error_details.get('code', 'N/A')
            logger.error(f"–û—à–∏–±–∫–∞ API Google Custom Search: {error_message} (–ö–æ–¥: {error_code})", None, False)
            return None

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–æ–ª—è 'items'
        items = results_json.get('items')
        if items:
            for item in items:
                link = item.get('link')
                if link:
                    links.append(link)
            logger.info(f"API –≤–µ—Ä–Ω—É–ª–æ {len(links)} —Å—Å—ã–ª–æ–∫.")
            return links
        else:
            logger.info("API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ–ª–µ 'items' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ).")
            return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç

    except requests.exceptions.Timeout as ex:
        logger.error(f'–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Google: {Config.API_ENDPOINT}', ex, exc_info=False)
        return None
    except requests.exceptions.HTTPError as ex:
        http_status_code: int = ex.response.status_code if ex.response is not None else 0
        logger.error(f'HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Google: {Config.API_ENDPOINT} (–°—Ç–∞—Ç—É—Å: {http_status_code})', ex, exc_info=False)
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
            error_content = response.json() if response else {'message': '–ù–µ—Ç —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞'}
            logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏ API: {error_content.get('error', error_content)}", None, False)
        except Exception:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ API.", None, False)
        return None
    except requests.exceptions.RequestException as ex:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Google: {Config.API_ENDPOINT}', ex, exc_info=True)
        return None
    except ValueError as ex: # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
         logger.error(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Google: {Config.API_ENDPOINT}', ex, exc_info=True)
         return None
    except Exception as ex:
        logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API Google: {Config.API_ENDPOINT}', ex, exc_info=True)
        return None


# --- –§—É–Ω–∫—Ü–∏–∏ –°–∫—Ä–∞–ø–∏–Ω–≥–∞ (–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç) ---
def get_google_search_url_scraper(query: str, num_results: int = 10, lang: str = 'ru') -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ Google (–¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞).

    Args:
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        num_results (int, optional): –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10.
        lang (str, optional): –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru'.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è Google Search.
    """
    params: Dict[str, Any] = {'q': query, 'num': num_results, 'hl': lang}
    encoded_params: str = urlencode(params)
    search_url: str = f'https://www.google.com/search?{encoded_params}'
    return search_url

def fetch_search_results_scraper(url: str, headers: Dict[str, str]) -> Optional[str]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML (–¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞).

    Args:
        url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google Search.
        headers (Dict[str, str]): HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.

    Returns:
        Optional[str]: HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    html_content: Optional[str] = None
    try:
        response: requests.Response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        html_content = response.text
        if 'CAPTCHA' in html_content or 'Our systems have detected unusual traffic' in html_content:
             logger.warning(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] Google –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç CAPTCHA –¥–ª—è URL: {url}')
             return None
        return html_content
    except requests.exceptions.Timeout as ex:
        logger.error(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ URL: {url}', ex, exc_info=False)
        return None
    except requests.exceptions.HTTPError as ex:
        http_status_code: int = ex.response.status_code if ex.response is not None else 0
        logger.error(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ URL: {url} (–°—Ç–∞—Ç—É—Å: {http_status_code})', ex, exc_info=False)
        return None
    except requests.exceptions.RequestException as ex:
        logger.error(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ URL: {url}', ex, exc_info=True)
        return None
    except Exception as ex:
        logger.error(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}', ex, exc_info=True)
        return None

def parse_links_scraper(html_content: Optional[str]) -> List[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ HTML (–¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞).

    Args:
        html_content (Optional[str]): –°—Ç—Ä–æ–∫–∞ —Å HTML-–∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL-–∞–¥—Ä–µ—Å–æ–≤.
    """
    links: List[str] = []
    found_urls: set[str] = set()
    if not html_content:
        return links
    soup: BeautifulSoup = BeautifulSoup(html_content, 'html.parser')
    result_blocks: List[Tag] = soup.find_all('div', class_=lambda x: x and isinstance(x, str) and ('g ' in x or x == 'g'))
    if not result_blocks:
        logger.debug("[–°–∫—Ä–∞–ø–∏–Ω–≥] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª–æ–∫–∏ ('div.g') –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∏—Å–∫ 'a > h3'.")
        potential_links: List[Tag] = soup.find_all('a')
        result_blocks = [a for a in potential_links if a.find('h3') is not None]

    block: Tag
    for block in result_blocks:
        link_tag: Optional[Tag] = None
        href: Optional[str] = None
        try:
            if block.name == 'a':
                link_tag = block
            else:
                link_tag = block.find('a')
            if link_tag and link_tag.has_attr('href'):
                href = link_tag['href']
                if href.startswith('/url?q='):
                    parsed_url = urlparse(href)
                    query_params = parse_qs(parsed_url.query)
                    actual_url: Optional[str] = query_params.get('q', [None])[0]
                    if actual_url and actual_url.startswith(('http://', 'https://')):
                        found_urls.add(actual_url)
                elif href.startswith(('http://', 'https://')):
                    parsed_href = urlparse(href)
                    if 'google.com' not in parsed_href.netloc:
                        found_urls.add(href)
        except Exception as ex:
            logger.warning(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ –∏–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏–∑ href="{href}"', ex, exc_info=False)
            continue
    links = list(found_urls)
    return links


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ ---
if __name__ == '__main__':
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    search_query: str = ''
    extracted_links: Optional[List[str]] = None # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –ø—Ä–∏ –æ—à–∏–±–∫–µ API/—Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    use_api: bool = False # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π API
    if Config.API_KEY and Config.CSE_ID:
        use_api = True
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã GOOGLE_API_KEY –∏ GOOGLE_CSE_ID. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Google Custom Search API.")
    else:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_API_KEY –∏/–∏–ª–∏ GOOGLE_CSE_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥: –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ (–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π).")
        logger.warning("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ API —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        use_api = False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    search_query = input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ')
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'...")

    # --- –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ ---
    if use_api:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API
        extracted_links = fetch_search_results_api(
            query=search_query,
            api_key=Config.API_KEY, # type: ignore (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ)
            cse_id=Config.CSE_ID,   # type: ignore (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ)
            num_results=Config.NUM_RESULTS
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–∫—Ä–∞–ø–∏–Ω–≥–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        scraper_url: str = get_google_search_url_scraper(search_query, Config.NUM_RESULTS)
        logger.info(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] URL –∑–∞–ø—Ä–æ—Å–∞: {scraper_url}')
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∞–ø–∏–Ω–≥–æ–º
        sleep_time: float = random.uniform(1.5, 4.0)
        logger.debug(f'[–°–∫—Ä–∞–ø–∏–Ω–≥] –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º: {sleep_time:.2f} —Å–µ–∫.')
        time.sleep(sleep_time)
        html: Optional[str] = fetch_search_results_scraper(scraper_url, Config.SCRAPER_HEADERS)
        if html:
            extracted_links = parse_links_scraper(html)
        else:
            logger.error('[–°–∫—Ä–∞–ø–∏–Ω–≥] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.')
            extracted_links = None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –Ω–µ—É–¥–∞—á—É

    # --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    if extracted_links is not None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ None (–æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ)
        if extracted_links:
            # –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print('\n--- –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ---')
            # –ù—É–º–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
            i: int
            link: str
            for i, link in enumerate(extracted_links, 1):
                print(f'{i}. {link}')
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ)
            logger.info('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Å—ã–ª–∫–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            print('\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ---')
            print('–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
        logger.error('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –°—Å—ã–ª–∫–∏ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã.')
        print('\n--- –û—à–∏–±–∫–∞ ---')
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')

    # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π print
    print('\n--- –í–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ ---')
    if not use_api:
        print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–µ—Ç–æ–¥ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞. –û–Ω –Ω–µ–Ω–∞–¥–µ–∂–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
        print('–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Custom Search API (—Å–º. –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è).')
    else:
         print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–µ—Ç–æ–¥ Google Custom Search API.')
    print('–ü–æ–º–Ω–∏—Ç–µ –æ –∫–≤–æ—Ç–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API –∏–ª–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ.')
